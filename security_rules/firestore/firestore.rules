rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // searchIdが有効なフォーマットかを確認する関数
    function isValidSearchId(searchId) {
      return searchId.matches('^[a-zA-Z0-9]{8}$');
    }

    // 公開プロフィールの必須フィールドを確認する関数
    function hasRequiredPublicFields(data) {
      return data.displayName != null
        && data.searchId is string
        && isValidSearchId(data.searchId);
    }

    // 非公開プロフィールの必須フィールドを確認する関数
    function hasRequiredPrivateFields(data) {
      return data.name != null
        && data.friends != null
        && data.groups != null
        && data.createdAt != null;
    }

    // usersコレクションのルール
    match /users/{userId} {
      // 公開情報の読み取りと検索クエリを許可
      allow read: if request.auth != null;
      allow list: if request.auth != null
        && request.query.limit <= 1
        && request.query.filters.size() == 1
        && request.query.filters[0].op == "=="
        && request.query.filters[0].field == "searchId";

      // 本人のみ書き込み可能
      allow create, update: if request.auth != null
        && request.auth.uid == userId
        && hasRequiredPublicFields(request.resource.data);

      allow delete: if request.auth != null
        && request.auth.uid == userId;

      // Private Subcollection Rules
      match /private/{docId} {
        // 読み書きは本人のみ
        allow read, write: if request.auth != null
          && request.auth.uid == userId;

        allow create, update: if request.auth != null
          && request.auth.uid == userId
          && hasRequiredPrivateFields(request.resource.data);
      }
    }

    // groupsコレクションのルール
    match /groups/{groupId} {
      // 読み取り:認証済みユーザーのみ
      allow read: if request.auth != null;

      // 作成:認証済みユーザーのみ(作成者は自動的にownerになる)
      allow create: if request.auth != null &&
        request.resource.data.ownerId == request.auth.uid &&
        request.resource.data.memberIds.hasAll([request.auth.uid]);

      // 更新:グループのオーナーまたはメンバーのみ
      allow update: if request.auth != null &&
        (resource.data.ownerId == request.auth.uid ||
         resource.data.memberIds.hasAny([request.auth.uid]));

      // 削除:グループのオーナーのみ
      allow delete: if request.auth != null &&
        resource.data.ownerId == request.auth.uid;
    }
  }
}
