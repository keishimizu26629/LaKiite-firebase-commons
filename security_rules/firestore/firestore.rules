rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // searchIdが有効なフォーマットかを確認する関数
    function isValidSearchId(searchId) {
      return searchId.matches('^[a-zA-Z0-9]{8}$');
    }

    // 公開プロフィールの必須フィールドを確認する関数
    function hasRequiredPublicFields(data) {
      return data.displayName != null
        && data.searchId is string
        && isValidSearchId(data.searchId);
    }

    // 非公開プロフィールの必須フィールドを確認する関数
    function hasRequiredPrivateFields(data) {
      return data.name != null
        && data.friends != null
        && data.groups != null
        && data.createdAt != null;
    }

    // ユーザーが友達かどうかを確認する関数
    function isFriend(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/private/profile)
        && get(/databases/$(database)/documents/users/$(userId)/private/profile).data.friends.hasAny([request.auth.uid]);
    }

    // スケジュールの必須フィールドを確認する関数
    function hasRequiredScheduleFields(data) {
      return data.title is string
        && data.description is string
        && data.startDateTime is timestamp
        && data.endDateTime is timestamp
        && data.ownerId is string
        && data.sharedLists is list
        && data.visibleTo is list;
    }

    // ユーザーがスケジュールにアクセス可能かを確認する関数
    function canAccessSchedule(scheduleData) {
      return request.auth != null && (
        scheduleData.ownerId == request.auth.uid ||
        scheduleData.visibleTo.hasAny([request.auth.uid])
      );
    }

    // ユーザーがリストにアクセス可能かを確認する関数
    function canAccessList(listData) {
      return request.auth != null && (
        listData.ownerId == request.auth.uid ||
        listData.memberIds.hasAny([request.auth.uid])
      );
    }

    // usersコレクションのルール
    match /users/{userId} {
      // 公開情報の読み取りと検索クエリを許可
      allow read: if request.auth != null;
      allow list: if request.auth != null && (
        // searchIdによる検索
        (
          request.query.limit <= 1
          && request.query.filters.size() == 1
          && request.query.filters[0].op == "=="
          && request.query.filters[0].field == "searchId"
        )
        // または、ドキュメントIDによる直接取得
        || (
          request.query.filters == null
        )
      );

      // 本人のみ書き込み可能
      allow create, update: if request.auth != null
        && request.auth.uid == userId
        && hasRequiredPublicFields(request.resource.data);

      allow delete: if request.auth != null
        && request.auth.uid == userId;

      // Private Subcollection Rules
      match /private/{docId} {
        // 読み取り: 本人または友達のみ
        allow read: if request.auth != null && (
          request.auth.uid == userId || isFriend(userId)
        );

        // 書き込み: 本人のみ
        allow write: if request.auth != null
          && request.auth.uid == userId;

        allow create, update: if request.auth != null
          && request.auth.uid == userId
          && hasRequiredPrivateFields(request.resource.data);
      }
    }

    // listsコレクションのルール
    match /lists/{listId} {
      // 読み取り: リストの所有者またはメンバーのみ
      allow read: if request.auth != null && canAccessList(resource.data);

      // 作成: 認証済みユーザーのみ
      allow create: if request.auth != null
        && request.resource.data.ownerId == request.auth.uid
        && request.resource.data.memberIds.hasAll([request.auth.uid]);

      // 更新: リストの所有者またはメンバーのみ
      allow update: if request.auth != null && canAccessList(resource.data);

      // 削除: リストの所有者のみ
      allow delete: if request.auth != null
        && resource.data.ownerId == request.auth.uid;
    }

    // groupsコレクションのルール
    match /groups/{groupId} {
      // 読み取り:認証済みユーザーのみ
      allow read: if request.auth != null;

      // 作成:認証済みユーザーのみ(作成者は自動的にownerになる)
      allow create: if request.auth != null &&
        request.resource.data.ownerId == request.auth.uid &&
        request.resource.data.memberIds.hasAll([request.auth.uid]);

      // 更新:グループのオーナーまたはメンバーのみ
      allow update: if request.auth != null &&
        (resource.data.ownerId == request.auth.uid ||
         resource.data.memberIds.hasAny([request.auth.uid]));

      // 削除:グループのオーナーのみ
      allow delete: if request.auth != null &&
        resource.data.ownerId == request.auth.uid;
    }

    // schedulesコレクションのルール
    match /schedules/{scheduleId} {
      // 読み取り: スケジュールの所有者またはvisibleToに含まれるユーザーのみ
      allow read: if request.auth != null && canAccessSchedule(resource.data);

      // 作成: 認証済みユーザーのみ
      allow create: if request.auth != null
        && request.resource.data.ownerId == request.auth.uid
        && hasRequiredScheduleFields(request.resource.data)
        // 共有リストへのアクセス権限を確認
        && request.resource.data.sharedLists.size() == 0 || (
          request.resource.data.sharedLists.size() > 0 &&
          getAfter(/databases/$(database)/documents/lists/$(request.resource.data.sharedLists[0])).data.memberIds.hasAny([request.auth.uid])
        );

      // 更新: スケジュールの所有者のみ
      allow update: if request.auth != null
        && resource.data.ownerId == request.auth.uid
        && hasRequiredScheduleFields(request.resource.data);

      // 削除: スケジュールの所有者のみ
      allow delete: if request.auth != null
        && resource.data.ownerId == request.auth.uid;

      // reactionsサブコレクションのルール
      match /reactions/{reactionId} {
        // 読み取り: スケジュールにアクセス可能なユーザーのみ
        allow read: if request.auth != null && canAccessSchedule(get(/databases/$(database)/documents/schedules/$(scheduleId)).data);

        // 作成・更新: スケジュールにアクセス可能なユーザーのみ、かつreactionIdは自分のユーザーIDと一致
        allow create, update: if request.auth != null
          && canAccessSchedule(get(/databases/$(database)/documents/schedules/$(scheduleId)).data)
          && reactionId == request.auth.uid
          && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のリアクションのみ
        allow delete: if request.auth != null && reactionId == request.auth.uid;
      }

      // commentsサブコレクションのルール
      match /comments/{commentId} {
        // 読み取り: スケジュールにアクセス可能なユーザーのみ
        allow read: if request.auth != null && canAccessSchedule(get(/databases/$(database)/documents/schedules/$(scheduleId)).data);

        // 作成: スケジュールにアクセス可能なユーザーのみ
        allow create: if request.auth != null
          && canAccessSchedule(get(/databases/$(database)/documents/schedules/$(scheduleId)).data)
          && request.resource.data.userId == request.auth.uid;

        // 削除: 自分のコメントのみ
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
      }
    }

    // notificationsコレクションのルール
    match /notifications/{notificationId} {
      // 必須フィールドの検証関数
      function hasRequiredFields(data) {
        return data.type in ['friend', 'groupInvitation']
          && data.sendUserId is string
          && data.receiveUserId is string
          && data.status in ['pending', 'accepted', 'rejected']
          && data.createdAt is timestamp
          && data.updatedAt is timestamp
          && data.rejectionCount is number
          && data.isRead is bool
          && (
            // グループ招待の場合はgroupIdが必須
            data.type == 'groupInvitation'
              ? (data.groupId is string)
              : true
          );
      }

      // 参加者かどうかを確認する関数
      function isParticipant() {
        return request.auth != null
          && (
            resource.data.sendUserId == request.auth.uid
            || resource.data.receiveUserId == request.auth.uid
          );
      }

      // 作成:認証済みユーザーのみ(送信者として)
      allow create: if request.auth != null
        && request.resource.data.sendUserId == request.auth.uid
        && hasRequiredFields(request.resource.data)
        && request.resource.data.status == 'pending'
        && request.resource.data.rejectionCount == 0
        && request.resource.data.isRead == false;

      // 読み取り:送信者または受信者のみ
      allow read: if request.auth != null && (
        resource.data.sendUserId == request.auth.uid
        || resource.data.receiveUserId == request.auth.uid
      );

      // リスト:認証済みユーザーのみ、かつクエリ条件が正しい場合
      allow list: if request.auth != null
        && (
          // フィルターなしの場合
          request.query.filters == null
          || (
            // receiveUserIdとstatusとtypeとisReadでのフィルタリング
            request.query.filters.size() <= 4
            && (
              // receiveUserIdフィルターのみ
              (
                request.query.filters.size() == 1
                && request.query.filters[0].field == 'receiveUserId'
                && request.query.filters[0].op == "=="
                && request.query.filters[0].value == request.auth.uid
              )
              || (
                // receiveUserIdとstatusフィルター
                request.query.filters.size() == 2
                && request.query.filters[0].field == 'receiveUserId'
                && request.query.filters[0].op == "=="
                && request.query.filters[0].value == request.auth.uid
                && request.query.filters[1].field == 'status'
                && request.query.filters[1].op == "=="
              )
              || (
                // receiveUserIdとstatusとtypeフィルター
                request.query.filters.size() == 3
                && request.query.filters[0].field == 'receiveUserId'
                && request.query.filters[0].op == "=="
                && request.query.filters[0].value == request.auth.uid
                && request.query.filters[1].field == 'status'
                && request.query.filters[1].op == "=="
                && request.query.filters[2].field == 'type'
                && request.query.filters[2].op == "=="
              )
              || (
                // receiveUserIdとisReadフィルター
                request.query.filters.size() == 2
                && request.query.filters[0].field == 'receiveUserId'
                && request.query.filters[0].op == "=="
                && request.query.filters[0].value == request.auth.uid
                && request.query.filters[1].field == 'isRead'
                && request.query.filters[1].op == "=="
              )
            )
          )
        );

      // 更新:送信者または受信者のみ
      allow update: if request.auth != null
        && isParticipant()
        && hasRequiredFields(request.resource.data)
        && request.resource.data.sendUserId == resource.data.sendUserId
        && request.resource.data.receiveUserId == resource.data.receiveUserId
        && request.resource.data.type == resource.data.type
        && (
          // グループ招待の場合はgroupIdの変更を禁止
          request.resource.data.type == 'groupInvitation'
            ? (request.resource.data.groupId == resource.data.groupId)
            : true
        );
    }
  }
}
